name: teleconnections test

on:
  pull_request:
    paths:
      - 'diagnostics/teleconnections/**'
      - 'tests/teleconnections/**'
  workflow_dispatch:
  schedule:
    - cron: "0 3 * * 1" # Run every Monday night at 3AM UTC

permissions:
  contents: read

jobs:
  teleconnections_test:
    env:
      # You can disable coverage by changing this to false. You can
      # also add other Python versions to the matrix, pinning the
      # coverage job to be executed only on certain versions.
      COVERAGE_ENABLED: ${{ matrix.python-version == '3.10' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10"]
    defaults:
      run:
        shell: bash -l {0}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Micromamba with teleconnections environment
        uses: mamba-org/setup-micromamba@v1
        with:
          environment-file: diagnostics/teleconnections/env-teleconnections.yaml
          environment-name: teleconnections
          cache-downloads: true
          cache-environment: true
          condarc: |
            channels:
              - numba
              - conda-forge
          create-args: >-
              python=${{ matrix.python-version }}

      - name: Install htmlq
        if: ${{ env.COVERAGE_ENABLED }}
        uses: baptiste0928/cargo-install@v2
        with:
          crate: htmlq
          cache-key: cargo-coverage

      - run: cargo install htmlq
        if: ${{ env.COVERAGE_ENABLED }}

      - name: Download and setup framework tests
        run: |
          ./download_data_for_tests.sh
          
      - name: Run framework tests
        # NOTE: We could gain a few seconds in the build, if needed,
        #       by running with coverage in only one matrix job run.
        run: |
          pytest -m aqua

      - name: Download and setup teleconnections tests
        run: |
          ./tests/teleconnections/download_data_for_tests.sh

      - name: Run teleconnections test
        # run: |
        #   python -m pytest ./tests/teleconnections/test_teleconnections.py
        run: |
          # Produce the HTML report. Defaults to writing in htmlcov/index.html.
          pytest --cov=aqua --cov-report=html --cov-report=xml --cov-branch --cov-append -m teleconnections
          
          if [[ ${COVERAGE_ENABLED} ]]; then
            # Extract the top header of the pytest HTML report.
            # Passes the HTML through htmlq, extracting the first H1 displayed.
            # Uses tr to delete breaklines and squeeze-repeats blank spaces,
            # saving space - this is used for an HTTP REST request to GitHub API.
            COV_HEADER=$(cat htmlcov/index.html | htmlq --pretty 'header > div > h1:first-of-type' | tr -d '\n' | tr -s ' ')
            
            # Extract the table of the pytest HTML report.
            # Passes the HTML through htmlq, extracting the table element.
            # Uses tr to delete breaklines and squeeze-repeats blank spaces.
            # Then calls sed with an expression that replaces the HTML a
            # elements by only its text.
            COV_TABLE=$(cat htmlcov/index.html | htmlq --pretty 'table' | tr -d '\n' | tr -s ' ' | sed 's|<a[^>]*>\([^<]*\)</a>|\1|g')

            # Produce an simplified HTML report.
            echo "${COV_HEADER}${COV_TABLE}" > coverage.html

            # Now simply use pandoc to convert HTML to Markdown.
            pandoc --from html --to 'markdown_strict+pipe_tables' coverage.html -o coverage.md

            # Append the missing lines, using pycobertura (which was used previously,
            # but replaced by pandoc/htmlq due to missing branch coverage info
            # https://github.com/aconrad/pycobertura/issues/167
            pycobertura show coverage.xml --format markdown --source aqua | awk -F"|" '{print "|" $2 "|" $6 "|"}' > missing.md
          
            echo -en '\n\n## Missing Lines\n\n' >> coverage.md

            cat missing.md >> coverage.md
          fi
      - name: Publish coverage reports (stdout)
        # Publish the coverage reports in only one matrix job run.
        # Only run if **NOT** running in a pull request (see step below).
        if: ${{ github.event_name != 'pull_request' && env.COVERAGE_ENABLED }}
        run: |
          cat coverage.md
      - name: Publish coverage reports (bot)
        # Publish the coverage reports in only one matrix job run.
        # Only run if running in a pull request.
        # See for more: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#example-using-contexts
        if: ${{ github.event_name == 'pull_request' && env.COVERAGE_ENABLED }}
        # Comment on an issue or pull request using GH Actions tooling:
        # https://github.com/actions/github-script#comment-on-an-issue
        uses: actions/github-script@v6
        id: coverage-report
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          # Based on: https://github.com/actions/github-script/blob/060d68304cc19ea84d828af10e34b9c6ca7bdb31/.github/workflows/pull-request-test.yml
          script: |
            // Get the existing comments.
            const {data: comments} = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.number,
            })

            // Find any comment already made by the bot.
            const botComment = comments.find(comment => comment.user.id === 41898282)
            const fs = require("fs").promises
            let commentBody = await fs.readFile("coverage.md", "utf8")
            // Replace _ by \_ since it is Markdown. Pandoc already adds it,
            // but pycobertura does not adds it. Thus the negative lookahead
            // ignoring already escaped underscores.
            commentBody = `${commentBody}`.replace(/_(?<!\\_)/g, '\\_')

            if (botComment) {
              console.log(`Updating comment in ${context.repo.owner}/${context.repo.repo}, comment ID: ${botComment.id}`)
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: commentBody
              })
            } else {
              console.log(`Creating comment in ${context.repo.owner}/${context.repo.repo}`)
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: commentBody
              })
            }  