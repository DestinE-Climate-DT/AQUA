# Configuration file for aqua-analysis.sh

# Variables $AQUA, $AQUA_CONFIG and $OUTPUT can be used to refer to the root directory of AQUA,
# the config directory (i.e. .aqua/diagnostics) and the output directory respectively

job:
    # The max_threads variable serves as a mechanism to control the maximum number of diagnostics being run concurrently
    # - If max_threads is set to 0 or a negative value: There is no limit on the number of parallel diagnostics,
    #                                                   and all processes run in parallel without waiting. 
    #                                                   This is suitable for situations where you want to utilize
    #                                                   the maximum available resources without any restrictions.
    # - If max_threads is set to a positive value: It limits the number of concurrent processes to the specified value. 
    #                                              After launching the designated number of diagnostics, the script waits
    #                                              for these to complete before launching additional ones. 
    #                                              This is useful when you are working on a system with limited
    #                                              resources, such as a login node

    max_threads: 0  # Set to the desired maximum number of threads, or leave it as 0 for no limit
    loglevel: "WARNING" # DEBUG, IN FO, WARNING, ERROR, CRITICAL

    # Run a check analysis to test the configuration and the presence of needed data
    # This also rebuild the area files, to avoid error with corrupted files
    run_checker: true
    
    # Default output directory for the analysis. Can be overridden by the command line arguments
    outputdir: "./output"

    # Default values, overriden from command line arguments
    catalog: null  # The catalog to use for the analysis
    model: "IFS-NEMO"
    exp: "historical-1990"
    source: "lra-r100-monthly"
    regrid: null

    script_path_base: "${AQUA}/src/aqua_diagnostics"  # Base directory for the diagnostic scripts

cluster:  # options for dask cluster (this works well on lumi)
    workers: 32
    threads: 1  # per worker
    memory_limit: 7GiB  # per worker

diagnostics:

  run: [  "global_biases",
          "timeseries_atm", "timeseries_oce", 
          "seasonal_cycles",
          "radiation-boxplots", 
          "radiation-timeseries", 
          "radiation-biases",
          "lat_lon_profiles", 
          "tropical_rainfall", 
          "teleconnections_atm", "teleconnections_oce",
          "ecmean", 
          "seaice",
          "ocean3d_circulation", "ocean3d_drift"
       ]

  # List of diagnostics

  # Each diagnostic can have the following options (all optional):
  #    nworkers: the number of workers to use for the diagnostic if a global dask cluster is not used. Default is 1.
  #              Notice: these are still provided mostly for testing the local cluster option, using a global cluster (not using this option) is the new default.
  #    config: the configuration file for the diagnostic.
  #    extra: extra command line arguments to pass to the diagnostic script.
  #    outname: the name of the output directory for the diagnostic. Default is the diagnostic name itself.
  #    script_path: the location of the script to run the diagnostic.
  #                 Default script_path is "$script_path_base/$diagnostic/cli/cli_${diagnostic}.py"
  #    nocluster: boolean, if set to true, the diagnostic will not use the global dask cluster. Default is false (needed for ECmean)

  global_biases:
    nworkers: 16
    script_path: "global_biases/cli_global_biases.py"
    config: "${AQUA_CONFIG}/diagnostics/global_biases/config_global_biases.yaml"
  timeseries_atm:
    script_path: "timeseries/cli_timeseries.py"
    config: "${AQUA_CONFIG}/diagnostics/timeseries/config_timeseries_atm.yaml"
    nworkers: 16
    outname: timeseries
  timeseries_oce:
    script_path: "timeseries/cli_timeseries.py"
    config: "${AQUA_CONFIG}/diagnostics/timeseries/config_timeseries_oce.yaml"
    nworkers: 8
    outname: timeseries
  seasonal_cycles:
    script_path: "timeseries/cli_timeseries.py"
    nworkers: 16
    config: "${AQUA_CONFIG}/diagnostics/timeseries/config_seasonalcycles_atm.yaml"
    outname: timeseries
  radiation_toa-biases:
    script_path: "global_biases/cli_global_biases.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-biases.yaml"
    outname: radiation
  radiation_toa-boxplots:
    script_path: "boxplots/cli_boxplots.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-boxplots.yaml"
    outname: radiation
  radiation_toa-timeseries:
    script_path: "timeseries/cli_timeseries.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-timeseries.yaml"
    outname: radiation
  radiation_surface-biases:
    script_path: "global_biases/cli_global_biases.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-biases.yaml"
    outname: radiation
  radiation_surface-boxplots:
    script_path: "boxplots/cli_boxplots.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-boxplots.yaml"
    outname: radiation
  radiation_surface-timeseries:
    script_path: "timeseries/cli_timeseries.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-timeseries.yaml"
    outname: radiation
  teleconnections_atm:
    script_path: "teleconnections/cli_teleconnections.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/teleconnections/config_teleconnections_atm.yaml"
    outname: teleconnections
  teleconnections_oce:
    script_path: "teleconnections/cli_teleconnections.py"
    nworkers: 4
    config: "${AQUA_CONFIG}/diagnostics/teleconnections/config_teleconnections_oce.yaml"
    outname: teleconnections
  tropical_rainfall:
    script_path: "../../diagnostics/tropical_rainfall/cli/cli_tropical_rainfall.py"
    nworkers: 16
    config: "${AQUA_CONFIG}/diagnostics/tropical_rainfall/cli/cli_config_trop_rainfall.yml"
    extra: "--regrid=r100 --freq=M --xmax=75 --bufferdir=${OUTPUT}/tropical_rainfall/"
  ecmean:
    script_path: "ecmean/cli_ecmean.py"
    nworkers: 4
    nocluster: true  # ECmean does not use the global dask cluster
    source_oce: true  # if a --source_oce argument was passed use it
    config: "${AQUA_CONFIG}/diagnostics/ecmean/config_ecmean_cli.yaml"
  ocean3d_drift:
    script_path: "../../diagnostics/ocean3d/cli/cli_ocean3d.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/ocean3d/cli/config.drift.yaml"
  ocean3d_circulation:
    script_path: "../../diagnostics/ocean3d/cli/cli_ocean3d.py"
    nworkers: 4
    config: "${AQUA_CONFIG}/diagnostics/ocean3d/cli/config.circulation.yaml"
  seaice:
    script_path: "seaice/cli_seaice.py"
    nworkers: 4
    config: "${AQUA_CONFIG}/diagnostics/seaice/config_seaice.yaml"
  lat_lon_profiles:
    script_path: "lat_lon_profiles/cli_lat_lon_profiles.py"
    nworkers: 8
    config: "${AQUA_CONFIG}/diagnostics/lat_lon_profiles/config_lat_lon_profiles.yaml"
    outname: lat_lon_profiles
