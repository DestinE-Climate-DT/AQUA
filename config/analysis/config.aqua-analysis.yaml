# Configuration file for aqua-analysis.sh

# Variables $AQUA, $AQUA_CONFIG and $OUTPUT can be used to refer to the root directory of AQUA,
# the config directory (i.e. .aqua/diagnostics) and the output directory respectively

job:
    # The max_threads variable serves as a mechanism to control the maximum number of diagnostics being run concurrently
    # - If max_threads is set to 0 or a negative value: There is no limit on the number of parallel diagnostics,
    #                                                   and all processes run in parallel without waiting. 
    #                                                   This is suitable for situations where you want to utilize
    #                                                   the maximum available resources without any restrictions.
    # - If max_threads is set to a positive value: It limits the number of concurrent processes to the specified value. 
    #                                              After launching the designated number of diagnostics, the script waits
    #                                              for these to complete before launching additional ones. 
    #                                              This is useful when you are working on a system with limited
    #                                              resources, such as a login node

    max_threads: 0  # Set to the desired maximum number of threads, or leave it as 0 for no limit
    loglevel: "WARNING" # DEBUG, IN FO, WARNING, ERROR, CRITICAL

    # Run a check analysis to test the configuration and the presence of needed data
    # This also rebuild the area files, to avoid error with corrupted files
    run_checker: true
    
    # Default output directory for the analysis. Can be overridden by the command line arguments
    outputdir: "./output"

    # Default values, overriden from command line arguments
    catalog: null  # The catalog to use for the analysis
    model: "IFS-NEMO"
    exp: "historical-1990"
    source: "lra-r100-monthly"
    regrid: null

    script_path_base: "${AQUA}/src/aqua_diagnostics"  # Base directory for the diagnostic scripts

cluster:  # options for dask cluster (this works well on lumi)
    workers: 32
    threads: 1  # per worker
    memory_limit: 7GiB  # per worker

# List of available CLI tools (diagnostics)
cli:
  - biases: "global_biases/cli_global_biases.py"
  - boxplots: "boxplots/cli_boxplots.py"
  - ecmean: "ecmean/cli_ecmean.py"
  - enso: "teleconnections/cli_teleconnections.py"
  - nao: "teleconnections/cli_teleconnections.py"
  - drift: "ocean_drift/cli_ocean_drift.py"
  - trends: "ocean_trends/cli_ocean_trends.py"
  - seaice: "seaice/cli_seaice.py"
  - stratification: "ocean_stratification/cli_ocean_stratification.py"
  - teleconnections: "teleconnections/cli_teleconnections.py"
  - timeseries: "timeseries/cli_timeseries.py"
  - tropical_rainfall: "../../diagnostics/tropical_rainfall/cli/cli_tropical_rainfall.py"

# List of diagnostics
# Each diagnostic is composed by a list of cli tools (see above).
# Each diagnostic tool (cli) can have the following options (all optional):
#    nworkers: the number of workers to use for the diagnostic if a global dask cluster is not used. Default is 1.
#              Notice: these are still provided mostly for testing the local cluster option,
#                      using a global cluster (not using this option) is the new default.
#    config: the configuration file for the diagnostic tool.
#    extra: extra command line arguments to pass to the diagnostic script.
#    nocluster: boolean, if set to true, the diagnostic will not use the global dask cluster. Default is false (needed for ECmean)
diagnostics:
  run:
    - climate_metrics
    - atmosphere
    - ocean2d
    - radiation
    - teleconnections
    - water_cycle
    - ocean3d
    - seaice

  atmosphere2d:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/atmosphere2d/config-atmosphere2d-biases.yaml"
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/atmosphere2d/config-atmosphere2d-timeseries.yaml"
  atmosphere3d:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/atmosphere3d/config-atmosphere3d-biases.yaml"
  climate_metrics:
    ecmean:
      config: "${AQUA_CONFIG}/diagnostics/climate_metrics/config-climate_metrics-ecmean.yaml"
      nocluster: true  # ECmean does not use the global dask cluster
      source_oce: true
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/climate_metrics/config-climate_metrics-timeseries.yaml"
  ocean2d:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/ocean2d/config-ocean2d-biases.yaml"
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/ocean2d/config-ocean2d-timeseries.yaml"
  ocean3d:
    drift:
      config: "${AQUA_CONFIG}/diagnostics/ocean3d/cli/config-ocean3d-drift.yaml"
    # stratification:
    #   config: "${AQUA_CONFIG}/diagnostics/ocean3d/cli/config-ocean3d-stratification.yaml"
    trends:
      config: "${AQUA_CONFIG}/diagnostics/ocean3d/cli/config-ocean3d-trends.yaml"
  radiation-surface:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-biases.yaml"
    boxplots:
      config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-boxplots.yaml"
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/radiation_surface/config-radiation_surface-timeseries.yaml"
  radiation-toa:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-biases.yaml"
    boxplots:
      config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-boxplots.yaml"
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/radiation_toa/config-radiation_toa-timeseries.yaml"
  seaice:
    seaice:
      config: "${AQUA_CONFIG}/diagnostics/seaice/config-seaice-seaice.yaml"
  teleconnections:
    enso:
      config: "${AQUA_CONFIG}/diagnostics/teleconnections/config-teleconnections-enso.yaml"
    nao:
      config: "${AQUA_CONFIG}/diagnostics/teleconnections/config-teleconnections-nao.yaml"
  water_cycle:
    biases:
      config: "${AQUA_CONFIG}/diagnostics/water_cycle/config-water_cycle-biases.yaml"
    # diurnal_cycle:
    #   config: "${AQUA_CONFIG}/diagnostics/water_cycle/config-water_cycle-diurnal_cycle.yaml"
    # lat_lon_profiles:
    #   config: "${AQUA_CONFIG}/diagnostics/water_cycle/config-water_cycle-lat_lon_profiles.yaml"
    timeseries:
      config: "${AQUA_CONFIG}/diagnostics/water_cycle/config-water_cycle-timeseries.yaml"
    tropical_rainfall:
      config: "${AQUA_CONFIG}/diagnostics/water_cycle/config-water_cycle-tropical_rainfall.yaml"
